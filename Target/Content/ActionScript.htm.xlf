<?xml version="1.0" encoding="UTF-8"?>
<xliff
  version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"
  MadCap:translationStatus="in-progress">
  <file
    xml:space="preserve"
    original="ActionScript.htm"
    source-language="en-us"
    MadCap:file-filter=""
    datatype="xhtml"
    target-language="es">
    <header>
      <skl><external-file
          href="ActionScript.htm.skl" /></skl>
      <phase-group>
        <phase
          phase-name="translation"
          process-name="translation" />
        <phase
          phase-name="completion"
          process-name="translation" />
        <phase
          phase-name="approval"
          process-name="review" />
        <phase
          phase-name="pretrans"
          process-name="pre-translation" />
      </phase-group>
      <count-group
        name="MadCap Statistics">
        <count
          count-type="total"
          unit="segment">20</count>
        <count
          count-type="x-subflow"
          unit="trans-unit">0</count>
      </count-group>
      <tool
        tool-id="MadCap Lingo 11"
        tool-name="Lingo"
        tool-version="11.0.7114.18563"
        tool-company="MadCap Software" />
    </header>
    <body><trans-unit
        id="1"
        restype="x-xml-h1"
        phase-name="pretrans"><source>ActionScript</source><seg-source><mrk
            mtype="seg"
            mid="1">ActionScript</mrk></seg-source><target
          state="translated"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Accepted"
            MadCap:matchPercent="0">hello</mrk></target></trans-unit><trans-unit
        id="2"
        restype="x-xml-p"
        phase-name="pretrans"><source>Uses HighlightJS.</source><seg-source><mrk
            mtype="seg"
            mid="1">Uses HighlightJS.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="3"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Highlight.js Example</source><seg-source><mrk
            mtype="seg"
            mid="1">Highlight.js Example</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="4"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>package org.example.dummy {<ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>import org.dummy.*;<ph
            id="3" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="4" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>/*define package inline interface*/<ph
            id="5" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="6" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public interface IFooBarzable {<ph
            id="7" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="8" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>public function foo(... pairs):Array;<ph
            id="9" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="10" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="11" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="12" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public class FooBar implements IFooBarzable {<ph
            id="13" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="14" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>static private var cnt:uint = 0;<ph
            id="15" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="16" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>private var bar:String;<ph
            id="17" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="18" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>//constructor<ph
            id="19" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="20" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>public function TestBar(bar:String):void {<ph
            id="21" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="22" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>bar = bar;<ph
            id="23" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="24" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>++cnt;<ph
            id="25" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="26" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
            id="27" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="28" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>public function foo(... pairs):Array {<ph
            id="29" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="30" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>pairs.push(bar);<ph
            id="31" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="32" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>return pairs;<ph
            id="33" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="34" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
            id="35" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="36" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="37" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph>}</source><seg-source><mrk
            mtype="seg"
            mid="1">package org.example.dummy {<ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>import org.dummy.*;<ph
              id="3" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="4" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>/*define package inline interface*/<ph
              id="5" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="6" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public interface IFooBarzable {<ph
              id="7" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="8" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>public function foo(... pairs):Array;<ph
              id="9" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="10" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="11" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="12" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public class FooBar implements IFooBarzable {<ph
              id="13" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="14" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>static private var cnt:uint = 0;<ph
              id="15" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="16" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>private var bar:String;<ph
              id="17" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="18" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>//constructor<ph
              id="19" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="20" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>public function TestBar(bar:String):void {<ph
              id="21" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="22" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>bar = bar;<ph
              id="23" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="24" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>++cnt;<ph
              id="25" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="26" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
              id="27" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="28" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>public function foo(... pairs):Array {<ph
              id="29" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="30" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>pairs.push(bar);<ph
              id="31" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="32" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>return pairs;<ph
              id="33" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="34" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
              id="35" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="36" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="37" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph></mrk><mrk
            mtype="seg"
            mid="2">}</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="5"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Comments</source><seg-source><mrk
            mtype="seg"
            mid="1">Comments</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="6"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>// Single line comment
/* Multi-line
comment */</source><seg-source><mrk
            mtype="seg"
            mid="1">// Single line comment /* Multi-line comment */</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="7"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Literal values</source><seg-source><mrk
            mtype="seg"
            mid="1">Literal values</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="8"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>17
"hello"
-3
9.4
null
true
false</source><seg-source><mrk
            mtype="seg"
            mid="1">17 "hello" -3 9.4 null true false</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="9"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Classes</source><seg-source><mrk
            mtype="seg"
            mid="1">Classes</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="10"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>class A {}
class B extends A {}</source><seg-source><mrk
            mtype="seg"
            mid="1">class A {} class B extends A {}</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="11"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Inline XML</source><seg-source><mrk
            mtype="seg"
            mid="1">Inline XML</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="12"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>var employees:XML =
    &lt;employees&gt;
        &lt;employee ssn="123-123-1234"&gt;
            &lt;name first="John" last="Doe"/&gt;
            &lt;address&gt;
                &lt;city&gt;San Francisco&lt;/city&gt;
                &lt;state&gt;CA&lt;/state&gt;
                &lt;zip&gt;98765&lt;/zip&gt;
            &lt;/address&gt;
        &lt;/employee&gt;
        &lt;employee ssn="789-789-7890"&gt;
            &lt;name first="Mary" last="Roe"/&gt;
            &lt;address&gt;
                &lt;city&gt;Newton&lt;/city&gt;
                &lt;state&gt;MA&lt;/state&gt;
                &lt;zip&gt;01234&lt;/zip&gt;
            &lt;/address&gt;
        &lt;/employee&gt;
    &lt;/employees&gt;;</source><seg-source><mrk
            mtype="seg"
            mid="1">var employees:XML = &lt;employees&gt; &lt;employee ssn="123-123-1234"&gt; &lt;name first="John" last="Doe"/&gt; &lt;address&gt; &lt;city&gt;San Francisco&lt;/city&gt; &lt;state&gt;CA&lt;/state&gt; &lt;zip&gt;98765&lt;/zip&gt; &lt;/address&gt; &lt;/employee&gt; &lt;employee ssn="789-789-7890"&gt; &lt;name first="Mary" last="Roe"/&gt; &lt;address&gt; &lt;city&gt;Newton&lt;/city&gt; &lt;state&gt;MA&lt;/state&gt; &lt;zip&gt;01234&lt;/zip&gt; &lt;/address&gt; &lt;/employee&gt; &lt;/employees&gt;;</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="13"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Prism.js Example</source><seg-source><mrk
            mtype="seg"
            mid="1">Prism.js Example</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="14"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>package {
  import flash.display.*;
  import flash.events.*;
  import flash.filters.BlurFilter;
  import flash.geom.*;
  import flash.ui.*;
  public class ch23ex2 extends Sprite {
    protected const BMP_SCALE:Number = 1/2;
    protected const D:Number = 1.015;
    protected const DIM_EFFECT:ColorTransform = new ColorTransform(D, D, D);
    protected const B:int = 16;
    protected const BLUR_EFFECT:BlurFilter = new BlurFilter(B, B, 1);
    protected var RLUT:Array, GLUT:Array, BLUT:Array;
    protected var sourceBmp:BitmapData;
    protected var colorBmp:BitmapData;
    protected var touches:Array = new Array();
    protected var fingerShape:Shape = new Shape();
    public function ch23ex2() {
      try {
        var test:Class = Multitouch;
        if (Multitouch.supportsTouchEvents) {
          Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
          init();
        } else {
          trace("Sorry, this example requires multitouch.");
        }
      } catch (error:ReferenceError) {
        trace("Sorry, but multitouch is not supported in this runtime.");
      }
    }
    protected function init():void {
      //create a black-and-white bitmap and a color bitmap, only show the color
      sourceBmp = new BitmapData(
        stage.stageWidth*BMP_SCALE, stage.stageHeight*BMP_SCALE, false, 0);
      colorBmp = sourceBmp.clone();
      var bitmap:Bitmap = new Bitmap(colorBmp, PixelSnapping.ALWAYS, true);
      bitmap.width = stage.stageWidth; bitmap.height = stage.stageHeight;
      addChild(bitmap);

      //create finger shape to paste onto the bitmap under your touches
      fingerShape.graphics.beginFill(0xffffff, 0.1);
      fingerShape.graphics.drawEllipse(-15, -20, 30, 40);
      fingerShape.graphics.endFill();

      //create the palette map from a gradient
      var gradient:Shape = new Shape();
      var m:Matrix = new Matrix();
      m.createGradientBox(256, 10);
      gradient.graphics.beginGradientFill(GradientType.LINEAR,
        [0x313ad8, 0x2dce4a, 0xdae234, 0x7a1c1c, 0x0f0303],
        [1, 1, 1, 1, 1], [0, 0.4*256, 0.75*256, 0.9*256, 255], m);
      gradient.graphics.drawRect(0, 0, 256, 10);
      var gradientBmp:BitmapData = new BitmapData(256, 10, false, 0);
      gradientBmp.draw(gradient);
      RLUT = new Array(); GLUT = new Array(); BLUT = new Array();
      for (var i:int = 0; i &lt; 256; i++) {
        var pixelColor:uint = gradientBmp.getPixel(i, 0);
        //I drew the gradient backwards, so sue me
        RLUT[256-i] = pixelColor &amp; 0xff0000;
        GLUT[256-i] = pixelColor &amp; 0x00ff00;
        BLUT[256-i] = pixelColor &amp; 0x0000ff;
      }

      stage.addEventListener(TouchEvent.TOUCH_BEGIN, assignTouch);
      stage.addEventListener(TouchEvent.TOUCH_MOVE, assignTouch);
      stage.addEventListener(TouchEvent.TOUCH_END, removeTouch);
      stage.addEventListener(Event.ENTER_FRAME, onEnterFrame);
    }
    protected function assignTouch(event:TouchEvent):void {
      touches[event.touchPointID] = event;
    }
    protected function removeTouch(event:TouchEvent):void {
      delete touches[event.touchPointID];
    }
    protected function onEnterFrame(event:Event):void {
      for (var key:String in touches) {
        var touch:TouchEvent = touches[key] as TouchEvent;
        if (touch) {
          //plaster the finger image under your finger
          var m:Matrix = new Matrix();
          m.translate(touch.stageX*BMP_SCALE, touch.stageY*BMP_SCALE);
          sourceBmp.draw(fingerShape, m, null, BlendMode.ADD);
        }
      }
      var O:Point = new Point(0, 0);
      //blur and ever-so-slightly brighten the image to make the color last
      sourceBmp.applyFilter(sourceBmp, sourceBmp.rect, O, BLUR_EFFECT);
      sourceBmp.colorTransform(sourceBmp.rect, DIM_EFFECT);
      //we've calculated the image in grayscale brightnesses, now make it color
      colorBmp.paletteMap(sourceBmp, sourceBmp.rect, O, RLUT, GLUT, BLUT, null);
    }
  }
}</source><seg-source><mrk
            mtype="seg"
            mid="1">package { import flash.display.*; import flash.events.*; import flash.filters.BlurFilter; import flash.geom.*; import flash.ui.*; public class ch23ex2 extends Sprite { protected const BMP_SCALE:Number = 1/2; protected const D:Number = 1.015; protected const DIM_EFFECT:ColorTransform = new ColorTransform(D, D, D); protected const B:int = 16; protected const BLUR_EFFECT:BlurFilter = new BlurFilter(B, B, 1); protected var RLUT:Array, GLUT:Array, BLUT:Array; protected var sourceBmp:BitmapData; protected var colorBmp:BitmapData; protected var touches:Array = new Array(); protected var fingerShape:Shape = new Shape(); public function ch23ex2() { try { var test:Class = Multitouch; if (Multitouch.supportsTouchEvents) { Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT; init(); } else { trace("Sorry, this example requires multitouch."); } } catch (error:ReferenceError) { trace("Sorry, but multitouch is not supported in this runtime."); } } protected function init():void { //create a black-and-white bitmap and a color bitmap, only show the color sourceBmp = new BitmapData( stage.stageWidth*BMP_SCALE, stage.stageHeight*BMP_SCALE, false, 0); colorBmp = sourceBmp.clone(); var bitmap:Bitmap = new Bitmap(colorBmp, PixelSnapping.ALWAYS, true); bitmap.width = stage.stageWidth; bitmap.height = stage.stageHeight; addChild(bitmap); //create finger shape to paste onto the bitmap under your touches fingerShape.graphics.beginFill(0xffffff, 0.1); fingerShape.graphics.drawEllipse(-15, -20, 30, 40); fingerShape.graphics.endFill(); //create the palette map from a gradient var gradient:Shape = new Shape(); var m:Matrix = new Matrix(); m.createGradientBox(256, 10); gradient.graphics.beginGradientFill(GradientType.LINEAR, [0x313ad8, 0x2dce4a, 0xdae234, 0x7a1c1c, 0x0f0303], [1, 1, 1, 1, 1], [0, 0.4*256, 0.75*256, 0.9*256, 255], m); gradient.graphics.drawRect(0, 0, 256, 10); var gradientBmp:BitmapData = new BitmapData(256, 10, false, 0); gradientBmp.draw(gradient); RLUT = new Array(); GLUT = new Array(); BLUT = new Array(); for (var i:int = 0; i &lt; 256; i++) { var pixelColor:uint = gradientBmp.getPixel(i, 0); //I drew the gradient backwards, so sue me RLUT[256-i] = pixelColor &amp; 0xff0000; GLUT[256-i] = pixelColor &amp; 0x00ff00; BLUT[256-i] = pixelColor &amp; 0x0000ff; } stage.addEventListener(TouchEvent.TOUCH_BEGIN, assignTouch); stage.addEventListener(TouchEvent.TOUCH_MOVE, assignTouch); stage.addEventListener(TouchEvent.TOUCH_END, removeTouch); stage.addEventListener(Event.ENTER_FRAME, onEnterFrame); } protected function assignTouch(event:TouchEvent):void { touches[event.touchPointID] = event; } protected function removeTouch(event:TouchEvent):void { delete touches[event.touchPointID]; } protected function onEnterFrame(event:Event):void { for (var key:String in touches) { var touch:TouchEvent = touches[key] as TouchEvent; if (touch) { //plaster the finger image under your finger var m:Matrix = new Matrix(); m.translate(touch.stageX*BMP_SCALE, touch.stageY*BMP_SCALE); sourceBmp.draw(fingerShape, m, null, BlendMode.ADD); } } var O:Point = new Point(0, 0); //blur and ever-so-slightly brighten the image to make the color last sourceBmp.applyFilter(sourceBmp, sourceBmp.rect, O, BLUR_EFFECT); sourceBmp.colorTransform(sourceBmp.rect, DIM_EFFECT); //we've calculated the image in grayscale brightnesses, now make it color colorBmp.paletteMap(sourceBmp, sourceBmp.rect, O, RLUT, GLUT, BLUT, null); } } }</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="15"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Move Sprite Across Screen With Keyboard Arrows</source><seg-source><mrk
            mtype="seg"
            mid="1">Move Sprite Across Screen With Keyboard Arrows</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="16"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>package {<ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.display.Sprite;<ph
            id="3" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="4" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.display.Stage;<ph
            id="5" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="6" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.events.Event;<ph
            id="7" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="8" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.events.KeyboardEvent;<ph
            id="9" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="10" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.ui.Keyboard;<ph
            id="11" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="12" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>public class KeyboardDemo extends Sprite {<ph
            id="13" xmlns="urn:oasis:names:tc:xliff:document:1.2"> 
    </ph>private var player:Sprite;<ph
            id="14" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="15" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public function KeyboardDemo() {<ph
            id="16" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="17" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>player = createAvatar(0xFFFF00) // size, color yellow<ph
            id="18" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="19" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>player.x = 200;<ph
            id="20" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="21" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>player.y = 100;<ph
            id="22" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="23" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>addChild(player);<ph
            id="24" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="25" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressedDown);<ph
            id="26" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="27" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="28" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="29" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>private function keyPressedDown(event:KeyboardEvent):void {<ph
            id="30" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="31" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>var key:uint = event.keyCode;<ph
            id="32" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="33" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>var step:uint = 5<ph
            id="34" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="35" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>switch (key) {<ph
            id="36" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="37" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.LEFT :<ph
            id="38" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="39" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.x -= step;<ph
            id="40" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="41" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
            id="42" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="43" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.RIGHT :<ph
            id="44" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="45" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.x += step;<ph
            id="46" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="47" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
            id="48" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="49" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.UP :<ph
            id="50" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="51" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.y -= step;<ph
            id="52" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="53" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
            id="54" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="55" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.DOWN :<ph
            id="56" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="57" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.y += step;<ph
            id="58" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="59" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
            id="60" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="61" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>}<ph
            id="62" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="63" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="64" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="65" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>private function createAvatar(bgColor:uint):Sprite {<ph
            id="66" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="67" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>var s:Sprite = new Sprite();<ph
            id="68" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="69" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.beginFill(bgColor);<ph
            id="70" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="71" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.drawCircle(0, 0, 40);<ph
            id="72" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="73" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.endFill();<ph
            id="74" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="75" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.beginFill(0x000000);<ph
            id="76" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="77" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.drawCircle(-15, -10, 5);<ph
            id="78" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="79" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.drawCircle(+15, -10, 5);<ph
            id="80" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="81" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.endFill();<ph
            id="82" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="83" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.lineStyle(2, 0x000000, 100);<ph
            id="84" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="85" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.moveTo(-20,15);<ph
            id="86" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="87" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>//this will define the start point of the curve<ph
            id="88" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="89" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.curveTo(0,35, 20,15);<ph
            id="90" xmlns="urn:oasis:names:tc:xliff:document:1.2"> 
        </ph>//the first two numbers are your control point for the curve<ph
            id="91" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="92" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>//the last two are the end point of the curve<ph
            id="93" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="94" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>return s;<ph
            id="95" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="96" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="97" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="98" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>}<ph
            id="99" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph>}</source><seg-source><mrk
            mtype="seg"
            mid="1">package {<ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.display.Sprite;<ph
              id="3" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="4" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.display.Stage;<ph
              id="5" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="6" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.events.Event;<ph
              id="7" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="8" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.events.KeyboardEvent;<ph
              id="9" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="10" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>import flash.ui.Keyboard;<ph
              id="11" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph></mrk><mrk
            mtype="seg"
            mid="2"><ph
              id="12" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>public class KeyboardDemo extends Sprite {<ph
              id="13" xmlns="urn:oasis:names:tc:xliff:document:1.2"> 
    </ph>private var player:Sprite;<ph
              id="14" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="15" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public function KeyboardDemo() {<ph
              id="16" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="17" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>player = createAvatar(0xFFFF00) // size, color yellow<ph
              id="18" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="19" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>player.x = 200;<ph
              id="20" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="21" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>player.y = 100;<ph
              id="22" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="23" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>addChild(player);<ph
              id="24" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="25" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressedDown);<ph
              id="26" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="27" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="28" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="29" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>private function keyPressedDown(event:KeyboardEvent):void {<ph
              id="30" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="31" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>var key:uint = event.keyCode;<ph
              id="32" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="33" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>var step:uint = 5<ph
              id="34" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="35" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>switch (key) {<ph
              id="36" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="37" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.LEFT :<ph
              id="38" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="39" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.x -= step;<ph
              id="40" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="41" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
              id="42" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="43" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.RIGHT :<ph
              id="44" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="45" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.x += step;<ph
              id="46" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="47" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
              id="48" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="49" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.UP :<ph
              id="50" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="51" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.y -= step;<ph
              id="52" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="53" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
              id="54" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="55" xmlns="urn:oasis:names:tc:xliff:document:1.2">          </ph>case Keyboard.DOWN :<ph
              id="56" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="57" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>player.y += step;<ph
              id="58" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="59" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>break;<ph
              id="60" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="61" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>}<ph
              id="62" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="63" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="64" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="65" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>private function createAvatar(bgColor:uint):Sprite {<ph
              id="66" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="67" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>var s:Sprite = new Sprite();<ph
              id="68" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="69" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.beginFill(bgColor);<ph
              id="70" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="71" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.drawCircle(0, 0, 40);<ph
              id="72" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="73" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.endFill();<ph
              id="74" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="75" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.beginFill(0x000000);<ph
              id="76" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="77" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.drawCircle(-15, -10, 5);<ph
              id="78" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="79" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.drawCircle(+15, -10, 5);<ph
              id="80" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="81" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.endFill();<ph
              id="82" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="83" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.lineStyle(2, 0x000000, 100);<ph
              id="84" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="85" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.moveTo(-20,15);<ph
              id="86" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="87" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>//this will define the start point of the curve<ph
              id="88" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph></mrk><mrk
            mtype="seg"
            mid="3"><ph
              id="89" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>s.graphics.curveTo(0,35, 20,15);<ph
              id="90" xmlns="urn:oasis:names:tc:xliff:document:1.2"> 
        </ph>//the first two numbers are your control point for the curve<ph
              id="91" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="92" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>//the last two are the end point of the curve<ph
              id="93" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="94" xmlns="urn:oasis:names:tc:xliff:document:1.2">      </ph>return s;<ph
              id="95" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="96" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="97" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="98" xmlns="urn:oasis:names:tc:xliff:document:1.2">  </ph>}<ph
              id="99" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph></mrk><mrk
            mtype="seg"
            mid="4">}</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit></body>
  </file>
</xliff>