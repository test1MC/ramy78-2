<?xml version="1.0" encoding="UTF-8"?>
<xliff
  version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"
  MadCap:translationStatus="untranslated">
  <file
    xml:space="preserve"
    original="Java.htm"
    source-language="en-us"
    MadCap:file-filter=""
    datatype="xhtml"
    target-language="es">
    <header>
      <skl><external-file
          href="Java.htm.skl" /></skl>
      <phase-group>
        <phase
          phase-name="translation"
          process-name="translation" />
        <phase
          phase-name="completion"
          process-name="translation" />
        <phase
          phase-name="approval"
          process-name="review" />
        <phase
          phase-name="pretrans"
          process-name="pre-translation" />
      </phase-group>
      <count-group
        name="MadCap Statistics">
        <count
          count-type="total"
          unit="segment">12</count>
        <count
          count-type="x-subflow"
          unit="trans-unit">0</count>
      </count-group>
      <tool
        tool-id="MadCap Lingo 11"
        tool-name="Lingo"
        tool-version="11.0.7114.18563"
        tool-company="MadCap Software" />
    </header>
    <body><trans-unit
        id="1"
        restype="x-xml-h1"
        phase-name="pretrans"><source>Java</source><seg-source><mrk
            mtype="seg"
            mid="1">Java</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="2"
        restype="x-xml-p"
        phase-name="pretrans"><source>Uses AvalonEdit.</source><seg-source><mrk
            mtype="seg"
            mid="1">Uses AvalonEdit.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="3"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Hello World</source><seg-source><mrk
            mtype="seg"
            mid="1">Hello World</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="4"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>class HelloWorldApp {
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }
}</source><seg-source><mrk
            mtype="seg"
            mid="1">class HelloWorldApp { public static void main(String[] args) { System.out.println("Hello World!"); } }</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="5"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Comments, strings, numbers</source><seg-source><mrk
            mtype="seg"
            mid="1">Comments, strings, numbers</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="6"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>// Single line comment
/* Multi-line
comment */

"foo \"bar\" baz";
'foo \'bar\' baz';

123
123.456
-123.456
.3f
1.3e9d
0xaf
0xAF
0xFF.AEP-4</source><seg-source><mrk
            mtype="seg"
            mid="1">// Single line comment /* Multi-line comment */ "foo \"bar\" baz"; 'foo \'bar\' baz'; 123 123.456 -123.456 .3f 1.3e9d 0xaf 0xAF 0xFF.AEP-4</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="7"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Prism.js Example</source><seg-source><mrk
            mtype="seg"
            mid="1">Prism.js Example</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="8"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>import java.util.Scanner;<ph
            id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph>public class Life {<ph
            id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="3" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>@Override @Bind("One")<ph
            id="4" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="5" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public void show(boolean[][] grid){<ph
            id="6" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="7" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>String s = "";<ph
            id="8" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="9" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>for(boolean[] row : grid){<ph
            id="10" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="11" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>for(boolean val : row)<ph
            id="12" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="13" xmlns="urn:oasis:names:tc:xliff:document:1.2">                </ph>if(val)<ph
            id="14" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="15" xmlns="urn:oasis:names:tc:xliff:document:1.2">                    </ph>s += "*";<ph
            id="16" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="17" xmlns="urn:oasis:names:tc:xliff:document:1.2">                </ph>else<ph
            id="18" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="19" xmlns="urn:oasis:names:tc:xliff:document:1.2">                    </ph>s += ".";<ph
            id="20" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="21" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>s += "\n";<ph
            id="22" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="23" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
            id="24" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="25" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>System.out.println(s);<ph
            id="26" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="27" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="28" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="29" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public static boolean[][] gen(){<ph
            id="30" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="31" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>boolean[][] grid = new boolean[10][10];<ph
            id="32" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="33" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>for(int r = 0; r &lt; 10; r++)<ph
            id="34" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="35" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>for(int c = 0; c &lt; 10; c++)<ph
            id="36" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="37" xmlns="urn:oasis:names:tc:xliff:document:1.2">                </ph>if( Math.random() &gt; 0.7 )<ph
            id="38" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="39" xmlns="urn:oasis:names:tc:xliff:document:1.2">                    </ph>grid[r][c] = true;<ph
            id="40" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="41" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>return grid;<ph
            id="42" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="43" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="44" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="45" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public static void main(String[] args){<ph
            id="46" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="47" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>boolean[][] world = gen();<ph
            id="48" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="49" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>show(world);<ph
            id="50" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="51" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>System.out.println();<ph
            id="52" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="53" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>world = nextGen(world);<ph
            id="54" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="55" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>show(world);<ph
            id="56" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="57" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>Scanner s = new Scanner(System.in);<ph
            id="58" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="59" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>while(s.nextLine().length() == 0){<ph
            id="60" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="61" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>System.out.println();<ph
            id="62" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="63" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>world = nextGen(world);<ph
            id="64" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="65" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>show(world);<ph
            id="66" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
            id="67" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
            id="68" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
            id="69" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
            id="70" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph>	// [...]<ph
            id="71" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph>}</source><seg-source><mrk
            mtype="seg"
            mid="1">import java.util.Scanner;<ph
              id="1" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph></mrk><mrk
            mtype="seg"
            mid="2">public class Life {<ph
              id="2" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="3" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>@Override @Bind("One")<ph
              id="4" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="5" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public void show(boolean[][] grid){<ph
              id="6" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="7" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>String s = "";<ph
              id="8" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="9" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>for(boolean[] row : grid){<ph
              id="10" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="11" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>for(boolean val : row)<ph
              id="12" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="13" xmlns="urn:oasis:names:tc:xliff:document:1.2">                </ph>if(val)<ph
              id="14" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="15" xmlns="urn:oasis:names:tc:xliff:document:1.2">                    </ph>s += "*";<ph
              id="16" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="17" xmlns="urn:oasis:names:tc:xliff:document:1.2">                </ph>else<ph
              id="18" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="19" xmlns="urn:oasis:names:tc:xliff:document:1.2">                    </ph>s += ".";<ph
              id="20" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="21" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>s += "\n";<ph
              id="22" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="23" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
              id="24" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="25" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>System.out.println(s);<ph
              id="26" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="27" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="28" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="29" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public static boolean[][] gen(){<ph
              id="30" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="31" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>boolean[][] grid = new boolean[10][10];<ph
              id="32" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="33" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>for(int r = 0; r &lt; 10; r++)<ph
              id="34" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="35" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>for(int c = 0; c &lt; 10; c++)<ph
              id="36" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="37" xmlns="urn:oasis:names:tc:xliff:document:1.2">                </ph>if( Math.random() &gt; 0.7 )<ph
              id="38" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="39" xmlns="urn:oasis:names:tc:xliff:document:1.2">                    </ph>grid[r][c] = true;<ph
              id="40" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="41" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>return grid;<ph
              id="42" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="43" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="44" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="45" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>public static void main(String[] args){<ph
              id="46" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="47" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>boolean[][] world = gen();<ph
              id="48" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="49" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>show(world);<ph
              id="50" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="51" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>System.out.println();<ph
              id="52" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="53" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>world = nextGen(world);<ph
              id="54" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="55" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>show(world);<ph
              id="56" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="57" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>Scanner s = new Scanner(System.in);<ph
              id="58" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="59" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>while(s.nextLine().length() == 0){<ph
              id="60" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="61" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>System.out.println();<ph
              id="62" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="63" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>world = nextGen(world);<ph
              id="64" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="65" xmlns="urn:oasis:names:tc:xliff:document:1.2">            </ph>show(world);<ph
              id="66" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph><ph
              id="67" xmlns="urn:oasis:names:tc:xliff:document:1.2">        </ph>}<ph
              id="68" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph><ph
              id="69" xmlns="urn:oasis:names:tc:xliff:document:1.2">    </ph>}<ph
              id="70" xmlns="urn:oasis:names:tc:xliff:document:1.2">

</ph></mrk><mrk
            mtype="protected"
            mid="3">	</mrk><mrk
            mtype="seg"
            mid="4">// [...]<ph
              id="71" xmlns="urn:oasis:names:tc:xliff:document:1.2">
</ph></mrk><mrk
            mtype="seg"
            mid="5">}</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="5"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit></body>
  </file>
</xliff>