<?xml version="1.0" encoding="UTF-8"?>
<xliff
  version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-strict.xsd" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"
  MadCap:translationStatus="untranslated">
  <file
    xml:space="preserve"
    original="Erlang.htm"
    source-language="en-us"
    MadCap:file-filter=""
    datatype="xhtml"
    target-language="es">
    <header>
      <skl><external-file
          href="Erlang.htm.skl" /></skl>
      <phase-group>
        <phase
          phase-name="translation"
          process-name="translation" />
        <phase
          phase-name="completion"
          process-name="translation" />
        <phase
          phase-name="approval"
          process-name="review" />
        <phase
          phase-name="pretrans"
          process-name="pre-translation" />
      </phase-group>
      <count-group
        name="MadCap Statistics">
        <count
          count-type="total"
          unit="segment">36</count>
        <count
          count-type="x-subflow"
          unit="trans-unit">0</count>
      </count-group>
      <tool
        tool-id="MadCap Lingo 11"
        tool-name="Lingo"
        tool-version="11.0.7114.18563"
        tool-company="MadCap Software" />
    </header>
    <body><trans-unit
        id="1"
        restype="x-xml-h1"
        phase-name="pretrans"><source>Erlang</source><seg-source><mrk
            mtype="seg"
            mid="1">Erlang</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="2"
        restype="x-xml-p"
        phase-name="pretrans"><source>Uses HighlightJS.</source><seg-source><mrk
            mtype="seg"
            mid="1">Uses HighlightJS.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="3"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Highlight.js Example</source><seg-source><mrk
            mtype="seg"
            mid="1">Highlight.js Example</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="4"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>-module(ssh_cli).

-behaviour(ssh_channel).

-include("ssh.hrl").
%% backwards compatibility
-export([listen/1, listen/2, listen/3, listen/4, stop/1]).

if L =/= [] -&gt;      % If L is not empty
    sum(L) / count(L);
true -&gt;
    error
end.

%% state
-record(state, {
    cm,
    channel
   }).

-spec foo(integer()) -&gt; integer().
foo(X) -&gt; 1 + X.

test(Foo)-&gt;Foo.

init([Shell, Exec]) -&gt;
    {ok, #state{shell = Shell, exec = Exec}};
init([Shell]) -&gt;
    false = not true,
    io:format("Hello, \"~p!~n", [atom_to_list('World')]),
    {ok, #state{shell = Shell}}.

concat([Single]) -&gt; Single;
concat(RList) -&gt;
    EpsilonFree = lists:filter(
        fun (Element) -&gt;
            case Element of
                epsilon -&gt; false;
                _ -&gt; true
            end
        end,
        RList),
    case EpsilonFree of
        [Single] -&gt; Single;
        Other -&gt; {concat, Other}
    end.

union_dot_union({union, _}=U1, {union, _}=U2) -&gt;
    union(lists:flatten(
        lists:map(
            fun (X1) -&gt;
                lists:map(
                    fun (X2) -&gt;
                        concat([X1, X2])
                    end,
                    union_to_list(U2)
                )
            end,
            union_to_list(U1)
        ))).</source><seg-source><mrk
            mtype="seg"
            mid="1">-module(ssh_cli).</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">-behaviour(ssh_channel).</mrk><mrk
            mtype="protected"
            mid="4"> </mrk><mrk
            mtype="seg"
            mid="5">-include("ssh.hrl").</mrk><mrk
            mtype="protected"
            mid="6"> </mrk><mrk
            mtype="seg"
            mid="7">%% backwards compatibility -export([listen/1, listen/2, listen/3, listen/4, stop/1]).</mrk><mrk
            mtype="protected"
            mid="8"> </mrk><mrk
            mtype="seg"
            mid="9">if L =/= [] -&gt; % If L is not empty sum(L) / count(L); true -&gt; error end.</mrk><mrk
            mtype="protected"
            mid="10"> </mrk><mrk
            mtype="seg"
            mid="11">%% state -record(state, { cm, channel }).</mrk><mrk
            mtype="protected"
            mid="12"> </mrk><mrk
            mtype="seg"
            mid="13">-spec foo(integer()) -&gt; integer().</mrk><mrk
            mtype="protected"
            mid="14"> </mrk><mrk
            mtype="seg"
            mid="15">foo(X) -&gt; 1 + X. test(Foo)-&gt;Foo.</mrk><mrk
            mtype="protected"
            mid="16"> </mrk><mrk
            mtype="seg"
            mid="17">init([Shell, Exec]) -&gt; {ok, #state{shell = Shell, exec = Exec}}; init([Shell]) -&gt; false = not true, io:format("Hello, \"~p!~n", [atom_to_list('World')]), {ok, #state{shell = Shell}}.</mrk><mrk
            mtype="protected"
            mid="18"> </mrk><mrk
            mtype="seg"
            mid="19">concat([Single]) -&gt; Single; concat(RList) -&gt; EpsilonFree = lists:filter( fun (Element) -&gt; case Element of epsilon -&gt; false; _ -&gt; true end end, RList), case EpsilonFree of [Single] -&gt; Single; Other -&gt; {concat, Other} end.</mrk><mrk
            mtype="protected"
            mid="20"> </mrk><mrk
            mtype="seg"
            mid="21">union_dot_union({union, _}=U1, {union, _}=U2) -&gt; union(lists:flatten( lists:map( fun (X1) -&gt; lists:map( fun (X2) -&gt; concat([X1, X2]) end, union_to_list(U2) ) end, union_to_list(U1) ))).</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="5"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="6"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="7"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="8"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="9"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="10"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="11"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="12"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="13"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="14"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="15"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="16"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="17"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="18"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="19"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="20"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="21"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="5"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Hello World</source><seg-source><mrk
            mtype="seg"
            mid="1">Hello World</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="6"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>-module(hello_world).
-compile(export_all).


hello() -&gt;
    io:format("hello world~n").</source><seg-source><mrk
            mtype="seg"
            mid="1">-module(hello_world).</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">-compile(export_all).</mrk><mrk
            mtype="protected"
            mid="4"> </mrk><mrk
            mtype="seg"
            mid="5">hello() -&gt; io:format("hello world~n").</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="5"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="7"
        restype="x-xml-madcap:codesnippetcaption"
        phase-name="pretrans"><source>Distributed Process</source><seg-source><mrk
            mtype="seg"
            mid="1">Distributed Process</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit><trans-unit
        id="8"
        restype="x-xml-madcap:codesnippetbody"
        phase-name="pretrans"><source>% Create a process and invoke the function web:start_server(Port, MaxConnections)
 ServerProcess = spawn(web, start_server, [Port, MaxConnections]),

 % Create a remote process and invoke the function
 % web:start_server(Port, MaxConnections) on machine RemoteNode
 RemoteProcess = spawn(RemoteNode, web, start_server, [Port, MaxConnections]),

 % Send a message to ServerProcess (asynchronously). The message consists of a tuple
 % with the atom "pause" and the number "10".
 ServerProcess ! {pause, 10},

 % Receive messages sent to this process
 receive
         a_message -&gt; do_something;
         {data, DataContent} -&gt; handle(DataContent);
         {hello, Text} -&gt; io:format("Got hello message: ~s", [Text]);
         {goodbye, Text} -&gt; io:format("Got goodbye message: ~s", [Text])
 end.</source><seg-source><mrk
            mtype="seg"
            mid="1">% Create a process and invoke the function web:start_server(Port, MaxConnections) ServerProcess = spawn(web, start_server, [Port, MaxConnections]), % Create a remote process and invoke the function % web:start_server(Port, MaxConnections) on machine RemoteNode RemoteProcess = spawn(RemoteNode, web, start_server, [Port, MaxConnections]), % Send a message to ServerProcess (asynchronously).</mrk><mrk
            mtype="protected"
            mid="2"> </mrk><mrk
            mtype="seg"
            mid="3">The message consists of a tuple % with the atom "pause" and the number "10".</mrk><mrk
            mtype="protected"
            mid="4"> </mrk><mrk
            mtype="seg"
            mid="5">ServerProcess ! {pause, 10}, % Receive messages sent to this process receive a_message -&gt; do_something; {data, DataContent} -&gt; handle(DataContent); {hello, Text} -&gt; io:format("Got hello message: ~s", [Text]); {goodbye, Text} -&gt; io:format("Got goodbye message: ~s", [Text]) end.</mrk></seg-source><target
          state="needs-translation"><mrk
            mtype="seg"
            mid="1"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="2"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="3"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="protected"
            mid="4"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /><mrk
            mtype="seg"
            mid="5"
            MadCap:segmentStatus="Untranslated"
            MadCap:matchPercent="0" /></target></trans-unit></body>
  </file>
</xliff>